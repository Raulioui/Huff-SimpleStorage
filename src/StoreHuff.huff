#define function updateHorseNumber(uint256) nonpayable returns()
#define function readNumberOfHorses() view returns(uint256)

#define constant NUMBER_OF_HORSES_LOCATION = FREE_STORAGE_POINTER()

#define macro MAIN() = takes(0) returns(0) {
    // Gets the function selector of the calldata
    0x00 calldataload 0xE0 shr 

    // If the function selector is equal to the updateHorseNumber selector, jump to the updateNumberOfHorses function
    // We duplicate the function selector to compare it with the readNumberOfHorses selector if returns false
    dup1 __FUNC_SIG(updateHorseNumber) eq updateJump jumpi 

    // If the function selector is equal to the readNumberOfHorses selector, jump to the readNumberOfHorses function 
    __FUNC_SIG(readNumberOfHorses)  eq readJump jumpi 

    // If the function selector is not equal to any of the above, revert.
    0x00 0x00 revert

    updateJump:
        UPDATE_NUMBER_OF_HORSES()

    readJump:
        READ_NUMBER_OF_HORSES()
}

#define macro UPDATE_NUMBER_OF_HORSES() = takes(0) returns(0) {
    0x04 // Get rid of the function selector 
    calldataload // Get the number to store
    [NUMBER_OF_HORSES_LOCATION] // Set the storage slot for store the number
    sstore // Store

    stop
}

#define macro READ_NUMBER_OF_HORSES() = takes(0) returns(0) {
    // Get the storage slot where the number is stored and get the value
    [NUMBER_OF_HORSES_LOCATION] sload 

    // Store the value in memory at slot 0 (becouse we don't have nothing yet in memory)
    0x00 mstore

    // Return the value in memory
    // 0x20 = 32 bytes of size of the value
    // 0x00 slot where is located at memory
    0x20 0x00 return

}
